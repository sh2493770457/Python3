{"version":3,"file":"lossless-json.js","sources":["../esm/config.js","../esm/utils.js","../esm/LosslessNumber.js","../esm/numberParsers.js","../esm/revive.js","../esm/parse.js","../esm/reviveDate.js","../esm/stringify.js"],"sourcesContent":["/**\n * Get and/or set configuration options\n * @deprecated There is no config anymore\n */\nexport function config(_options) {\n  // Backward compatibility warning for v1.x\n  throw new Error('config is deprecated, support for circularRefs is removed from the library. ' + 'If you encounter circular references in your data structures, ' + 'please rethink your datastructures: ' + 'better prevent circular references in the first place.');\n}\n//# sourceMappingURL=config.js.map","/**\n * Test whether a string contains an integer number\n */\nexport function isInteger(value) {\n  return INTEGER_REGEX.test(value);\n}\nconst INTEGER_REGEX = /^-?[0-9]+$/;\n\n/**\n * Test whether a string contains a number\n * http://stackoverflow.com/questions/13340717/json-numbers-regular-expression\n */\nexport function isNumber(value) {\n  return NUMBER_REGEX.test(value);\n}\nconst NUMBER_REGEX = /^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Test whether a string can be safely represented with a number\n * without information loss.\n *\n * When approx is true, floating point numbers that lose a few digits but\n * are still approximately equal in value are considered safe too.\n * Integer numbers must still be exactly equal.\n */\nexport function isSafeNumber(value, config) {\n  const num = Number.parseFloat(value);\n  const str = String(num);\n  const v = extractSignificantDigits(value);\n  const s = extractSignificantDigits(str);\n  if (v === s) {\n    return true;\n  }\n  if (config?.approx === true) {\n    // A value is approximately equal when:\n    // 1. it is a floating point number, not an integer\n    // 2. it has at least 14 digits\n    // 3. the first 14 digits are equal\n    const requiredDigits = 14;\n    if (!isInteger(value) && s.length >= requiredDigits && v.startsWith(s.substring(0, requiredDigits))) {\n      return true;\n    }\n  }\n  return false;\n}\nexport let UnsafeNumberReason = /*#__PURE__*/function (UnsafeNumberReason) {\n  UnsafeNumberReason[\"underflow\"] = \"underflow\";\n  UnsafeNumberReason[\"overflow\"] = \"overflow\";\n  UnsafeNumberReason[\"truncate_integer\"] = \"truncate_integer\";\n  UnsafeNumberReason[\"truncate_float\"] = \"truncate_float\";\n  return UnsafeNumberReason;\n}({});\n\n/**\n * When the provided value is an unsafe number, describe what the reason is:\n * overflow, underflow, truncate_integer, or truncate_float.\n * Returns undefined when the value is safe.\n */\nexport function getUnsafeNumberReason(value) {\n  if (isSafeNumber(value, {\n    approx: false\n  })) {\n    return undefined;\n  }\n  if (isInteger(value)) {\n    return UnsafeNumberReason.truncate_integer;\n  }\n  const num = Number.parseFloat(value);\n  if (!Number.isFinite(num)) {\n    return UnsafeNumberReason.overflow;\n  }\n  if (num === 0) {\n    return UnsafeNumberReason.underflow;\n  }\n  return UnsafeNumberReason.truncate_float;\n}\n\n/**\n * Convert a string into a number when it is safe to do so.\n * Throws an error otherwise, explaining the reason.\n */\nexport function toSafeNumberOrThrow(value, config) {\n  const number = Number.parseFloat(value);\n  const unsafeReason = getUnsafeNumberReason(value);\n  if (config?.approx === true ? unsafeReason && unsafeReason !== UnsafeNumberReason.truncate_float : unsafeReason) {\n    const unsafeReasonText = unsafeReason?.replace(/_\\w+$/, '');\n    throw new Error(`Cannot safely convert to number: the value '${value}' would ${unsafeReasonText} and become ${number}`);\n  }\n  return number;\n}\n\n/**\n * Get the significant digits of a number.\n *\n * For example:\n *   '2.34' returns '234'\n *   '-77' returns '77'\n *   '0.003400' returns '34'\n *   '120.5e+30' returns '1205'\n **/\nexport function extractSignificantDigits(value) {\n  return value\n  // from \"-0.250e+30\" to \"-0.250\"\n  .replace(EXPONENTIAL_PART_REGEX, '')\n\n  // from \"-0.250\" to \"-0250\"\n  .replace(DOT_REGEX, '')\n\n  // from \"-0250\" to \"-025\"\n  .replace(TRAILING_ZEROS_REGEX, '')\n\n  // from \"-025\" to \"25\"\n  .replace(LEADING_MINUS_AND_ZEROS_REGEX, '');\n}\nconst EXPONENTIAL_PART_REGEX = /[eE][+-]?\\d+$/;\nconst LEADING_MINUS_AND_ZEROS_REGEX = /^-?(0*)?/;\nconst DOT_REGEX = /\\./;\nconst TRAILING_ZEROS_REGEX = /0+$/;\n//# sourceMappingURL=utils.js.map","import { UnsafeNumberReason, extractSignificantDigits, getUnsafeNumberReason, isInteger, isNumber } from './utils.js';\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport class LosslessNumber {\n  // numeric value as string\n\n  // type information\n  isLosslessNumber = true;\n  constructor(value) {\n    if (!isNumber(value)) {\n      throw new Error(`Invalid number (value: \"${value}\")`);\n    }\n    this.value = value;\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  valueOf() {\n    const unsafeReason = getUnsafeNumberReason(this.value);\n\n    // safe or truncate_float\n    if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n      return Number.parseFloat(this.value);\n    }\n\n    // truncate_integer\n    if (isInteger(this.value)) {\n      return BigInt(this.value);\n    }\n\n    // overflow or underflow\n    throw new Error(`Cannot safely convert to number: the value '${this.value}' would ${unsafeReason} and become ${Number.parseFloat(this.value)}`);\n  }\n\n  /**\n   * Get the value of the LosslessNumber as string.\n   */\n  toString() {\n    return this.value;\n  }\n\n  // Note: we do NOT implement a .toJSON() method, and you should not implement\n  // or use that, it cannot safely turn the numeric value in the string into\n  // stringified JSON since it has to be parsed into a number first.\n}\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value) {\n  // @ts-ignore\n  return value && typeof value === 'object' && value.isLosslessNumber === true || false;\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value) {\n  if (extractSignificantDigits(String(value)).length > 15) {\n    throw new Error(`Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself (value: ${value})`);\n  }\n  if (Number.isNaN(value)) {\n    throw new Error('Invalid number: NaN');\n  }\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number: ${value}`);\n  }\n  return new LosslessNumber(String(value));\n}\n//# sourceMappingURL=LosslessNumber.js.map","import { LosslessNumber } from './LosslessNumber.js';\nimport { isInteger } from './utils.js';\nexport function parseLosslessNumber(value) {\n  return new LosslessNumber(value);\n}\nexport function parseNumberAndBigInt(value) {\n  return isInteger(value) ? BigInt(value) : Number.parseFloat(value);\n}\n//# sourceMappingURL=numberParsers.js.map","import { isLosslessNumber } from './LosslessNumber.js';\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nexport function revive(json, reviver) {\n  return reviveValue({\n    '': json\n  }, '', json, reviver);\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(context, key, value, reviver) {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver));\n  }\n  if (value && typeof value === 'object' && !isLosslessNumber(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(context, key, reviveObject(value, reviver));\n  }\n  return reviver.call(context, key, value);\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object, reviver) {\n  for (const key of Object.keys(object)) {\n    const value = reviveValue(object, key, object[key], reviver);\n    if (value !== undefined) {\n      object[key] = value;\n    } else {\n      delete object[key];\n    }\n  }\n  return object;\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array, reviver) {\n  for (let i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, String(i), array[i], reviver);\n  }\n  return array;\n}\n//# sourceMappingURL=revive.js.map","import { parseLosslessNumber } from './numberParsers.js';\nimport { revive } from './revive.js';\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(text, reviver) {\n  let parseNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : parseLosslessNumber;\n  let i = 0;\n  const value = parseValue();\n  expectValue(value);\n  expectEndOfInput();\n  return reviver ? revive(value, reviver) : value;\n  function parseObject() {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++;\n      skipWhitespace();\n      const object = {};\n      let initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma();\n          skipWhitespace();\n        } else {\n          initial = false;\n        }\n        const start = i;\n        const key = parseString();\n        if (key === undefined) {\n          throwObjectKeyExpected();\n          return; // To make TS happy\n        }\n        skipWhitespace();\n        eatColon();\n        const value = parseValue();\n        if (value === undefined) {\n          throwObjectValueExpected();\n          return; // To make TS happy\n        }\n\n        // TODO: test deep equal instead of strict equal\n        if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(value, object[key])) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key, start + 1);\n        }\n        object[key] = value;\n      }\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected();\n      }\n      i++;\n      return object;\n    }\n  }\n  function parseArray() {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++;\n      skipWhitespace();\n      const array = [];\n      let initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma();\n        } else {\n          initial = false;\n        }\n        const value = parseValue();\n        expectArrayItem(value);\n        array.push(value);\n      }\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected();\n      }\n      i++;\n      return array;\n    }\n  }\n  function parseValue() {\n    skipWhitespace();\n    const value = parseString() ?? parseNumeric() ?? parseObject() ?? parseArray() ?? parseKeyword('true', true) ?? parseKeyword('false', false) ?? parseKeyword('null', null);\n    skipWhitespace();\n    return value;\n  }\n  function parseKeyword(name, value) {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length;\n      return value;\n    }\n  }\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++;\n    }\n  }\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++;\n      let result = '';\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text[i + 1];\n          const escapeChar = escapeCharacters[char];\n          if (escapeChar !== undefined) {\n            result += escapeChar;\n            i++;\n          } else if (char === 'u') {\n            if (isHex(text.charCodeAt(i + 2)) && isHex(text.charCodeAt(i + 3)) && isHex(text.charCodeAt(i + 4)) && isHex(text.charCodeAt(i + 5))) {\n              result += String.fromCharCode(Number.parseInt(text.slice(i + 2, i + 6), 16));\n              i += 5;\n            } else {\n              throwInvalidUnicodeCharacter(i);\n            }\n          } else {\n            throwInvalidEscapeCharacter(i);\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i];\n          } else {\n            throwInvalidCharacter(text[i]);\n          }\n        }\n        i++;\n      }\n      expectEndOfString();\n      i++;\n      return result;\n    }\n  }\n  function parseNumeric() {\n    const start = i;\n    if (text.charCodeAt(i) === codeMinus) {\n      i++;\n      expectDigit(start);\n    }\n    if (text.charCodeAt(i) === codeZero) {\n      i++;\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++;\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeDot) {\n      i++;\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++;\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++;\n      }\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (i > start) {\n      return parseNumber(text.slice(start, i));\n    }\n  }\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(`Comma ',' expected after value ${gotAt()}`);\n    }\n    i++;\n  }\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(`Colon ':' expected after property name ${gotAt()}`);\n    }\n    i++;\n  }\n  function expectValue(value) {\n    if (value === undefined) {\n      throw new SyntaxError(`JSON value expected ${gotAt()}`);\n    }\n  }\n  function expectArrayItem(value) {\n    if (value === undefined) {\n      throw new SyntaxError(`Array item expected ${gotAt()}`);\n    }\n  }\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(`Expected end of input ${gotAt()}`);\n    }\n  }\n  function expectDigit(start) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i);\n      throw new SyntaxError(`Invalid number '${numSoFar}', expecting a digit ${gotAt()}`);\n    }\n  }\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(`End of string '\"' expected ${gotAt()}`);\n    }\n  }\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(`Quoted object key expected ${gotAt()}`);\n  }\n  function throwDuplicateKey(key, pos) {\n    throw new SyntaxError(`Duplicate key '${key}' encountered at position ${pos}`);\n  }\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(`Quoted object key or end of object '}' expected ${gotAt()}`);\n  }\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(`Array item or end of array ']' expected ${gotAt()}`);\n  }\n  function throwInvalidCharacter(char) {\n    throw new SyntaxError(`Invalid character '${char}' ${pos()}`);\n  }\n  function throwInvalidEscapeCharacter(start) {\n    const chars = text.slice(start, start + 2);\n    throw new SyntaxError(`Invalid escape character '${chars}' ${pos()}`);\n  }\n  function throwObjectValueExpected() {\n    throw new SyntaxError(`Object value expected after ':' ${pos()}`);\n  }\n  function throwInvalidUnicodeCharacter(start) {\n    const chars = text.slice(start, start + 6);\n    throw new SyntaxError(`Invalid unicode character '${chars}' ${pos()}`);\n  }\n\n  // zero based character position\n  function pos() {\n    return `at position ${i}`;\n  }\n  function got() {\n    return i < text.length ? `but got '${text[i]}'` : 'but reached end of input';\n  }\n  function gotAt() {\n    return `${got()} ${pos()}`;\n  }\n}\nfunction isWhitespace(code) {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn;\n}\nfunction isHex(code) {\n  return code >= codeZero && code <= codeNine || code >= codeUppercaseA && code <= codeUppercaseF || code >= codeLowercaseA && code <= codeLowercaseF;\n}\nfunction isDigit(code) {\n  return code >= codeZero && code <= codeNine;\n}\nfunction isNonZeroDigit(code) {\n  return code >= codeOne && code <= codeNine;\n}\nexport function isValidStringCharacter(code) {\n  return code >= 0x20 && code <= 0x10ffff;\n}\nexport function isDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((item, index) => isDeepEqual(item, b[index]));\n  }\n  if (isObject(a) && isObject(b)) {\n    const keys = [...new Set([...Object.keys(a), ...Object.keys(b)])];\n    return keys.every(key => isDeepEqual(a[key], b[key]));\n  }\n  return false;\n}\nfunction isObject(value) {\n  return typeof value === 'object' && value !== null;\n}\n\n// map with all escape characters\nconst escapeCharacters = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n};\nconst codeBackslash = 0x5c; // \"\\\"\nconst codeOpeningBrace = 0x7b; // \"{\"\nconst codeClosingBrace = 0x7d; // \"}\"\nconst codeOpeningBracket = 0x5b; // \"[\"\nconst codeClosingBracket = 0x5d; // \"]\"\nconst codeSpace = 0x20; // \" \"\nconst codeNewline = 0xa; // \"\\n\"\nconst codeTab = 0x9; // \"\\t\"\nconst codeReturn = 0xd; // \"\\r\"\nconst codeDoubleQuote = 0x0022; // \"\nconst codePlus = 0x2b; // \"+\"\nconst codeMinus = 0x2d; // \"-\"\nconst codeZero = 0x30;\nconst codeOne = 0x31;\nconst codeNine = 0x39;\nconst codeComma = 0x2c; // \",\"\nconst codeDot = 0x2e; // \".\" (dot, period)\nconst codeColon = 0x3a; // \":\"\nexport const codeUppercaseA = 0x41; // \"A\"\nexport const codeLowercaseA = 0x61; // \"a\"\nexport const codeUppercaseE = 0x45; // \"E\"\nexport const codeLowercaseE = 0x65; // \"e\"\nexport const codeUppercaseF = 0x46; // \"F\"\nexport const codeLowercaseF = 0x66; // \"f\"\n//# sourceMappingURL=parse.js.map","/**\n * Revive a string containing an ISO 8601 date string into a JavaScript `Date` object\n */\nexport function reviveDate(key, value) {\n  return typeof value === 'string' && isoDateRegex.test(value) ? new Date(value) : value;\n}\n\n// Matches strings like \"2022-08-25T09:39:19.288Z\"\nconst isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\n//# sourceMappingURL=reviveDate.js.map","import { isNumber } from './utils.js';\n\n/**\n * The LosslessJSON.stringify() method converts a JavaScript value to a JSON string,\n * optionally replacing values if a replacer function is specified, or\n * optionally including only the specified properties if a replacer array is specified.\n *\n * @param value\n * The value to convert to a JSON string.\n *\n * @param [replacer]\n * A function that alters the behavior of the stringification process,\n * or an array of String and Number objects that serve as a whitelist for\n * selecting the properties of the value object to be included in the JSON string.\n * If this value is null or not provided, all properties of the object are\n * included in the resulting JSON string.\n *\n * @param [space]\n * A String or Number object that's used to insert white space into the output\n * JSON string for readability purposes. If this is a Number, it indicates the\n * number of space characters to use as white space; this number is capped at 10\n * if it's larger than that. Values less than 1 indicate that no space should be\n * used. If this is a String, the string (or the first 10 characters of the string,\n * if it's longer than that) is used as white space. If this parameter is not\n * provided (or is null), no white space is used.\n *\n * @param [numberStringifiers]\n * An optional list with additional number stringifiers, for example to serialize\n * a BigNumber. The output of the function must be valid stringified JSON.\n * When `undefined` is returned, the property will be deleted from the object.\n * The difference with using a `replacer` is that the output of a `replacer`\n * must be JSON and will be stringified afterwards, whereas the output of the\n * `numberStringifiers` is already stringified JSON.\n *\n * @returns Returns the string representation of the JSON object.\n */\nexport function stringify(value, replacer, space, numberStringifiers) {\n  const resolvedSpace = resolveSpace(space);\n  const replacedValue = typeof replacer === 'function' ? replacer.call({\n    '': value\n  }, '', value) : value;\n  return stringifyValue(replacedValue, '');\n\n  /**\n   * Stringify a value\n   */\n  function stringifyValue(value, indent) {\n    if (Array.isArray(numberStringifiers)) {\n      const stringifier = numberStringifiers.find(item => item.test(value));\n      if (stringifier) {\n        const str = stringifier.stringify(value);\n        if (typeof str !== 'string' || !isNumber(str)) {\n          throw new Error(`Invalid JSON number: output of a number stringifier must be a string containing a JSON number (output: ${str})`);\n        }\n        return str;\n      }\n    }\n\n    // boolean, null, number, string, or date\n    if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string' || value === null || value instanceof Date || value instanceof Boolean || value instanceof Number || value instanceof String) {\n      return JSON.stringify(value);\n    }\n\n    // lossless number, the secret ingredient :)\n    // @ts-ignore\n    if (value?.isLosslessNumber) {\n      return value.toString();\n    }\n\n    // BigInt\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n\n    // Array\n    if (Array.isArray(value)) {\n      return stringifyArray(value, indent);\n    }\n\n    // Object (test lastly!)\n    if (value && typeof value === 'object') {\n      return stringifyObject(value, indent);\n    }\n    return undefined;\n  }\n\n  /**\n   * Stringify an array\n   */\n  function stringifyArray(array, indent) {\n    if (array.length === 0) {\n      return '[]';\n    }\n    const childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    let str = resolvedSpace ? '[\\n' : '[';\n    for (let i = 0; i < array.length; i++) {\n      const item = typeof replacer === 'function' ? replacer.call(array, String(i), array[i]) : array[i];\n      if (resolvedSpace) {\n        str += childIndent;\n      }\n      if (typeof item !== 'undefined' && typeof item !== 'function') {\n        str += stringifyValue(item, childIndent);\n      } else {\n        str += 'null';\n      }\n      if (i < array.length - 1) {\n        str += resolvedSpace ? ',\\n' : ',';\n      }\n    }\n    str += resolvedSpace ? `\\n${indent}]` : ']';\n    return str;\n  }\n\n  /**\n   * Stringify an object\n   */\n  function stringifyObject(object, indent) {\n    if (typeof object.toJSON === 'function') {\n      return stringify(object.toJSON(), replacer, space, undefined);\n    }\n    const keys = Array.isArray(replacer) ? replacer.map(String) : Object.keys(object);\n    if (keys.length === 0) {\n      return '{}';\n    }\n    const childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    let first = true;\n    let str = resolvedSpace ? '{\\n' : '{';\n    for (const key of keys) {\n      const value = typeof replacer === 'function' ? replacer.call(object, key, object[key]) : object[key];\n      if (includeProperty(key, value)) {\n        if (first) {\n          first = false;\n        } else {\n          str += resolvedSpace ? ',\\n' : ',';\n        }\n        const keyStr = JSON.stringify(key);\n        str += resolvedSpace ? `${childIndent + keyStr}: ` : `${keyStr}:`;\n        str += stringifyValue(value, childIndent);\n      }\n    }\n    str += resolvedSpace ? `\\n${indent}}` : '}';\n    return str;\n  }\n\n  /**\n   * Test whether to include a property in a stringified object or not.\n   */\n  function includeProperty(_key, value) {\n    return typeof value !== 'undefined' && typeof value !== 'function' && typeof value !== 'symbol';\n  }\n}\n\n/**\n * Resolve a JSON stringify space:\n * replace a number with a string containing that number of spaces\n */\nfunction resolveSpace(space) {\n  if (typeof space === 'number') {\n    return ' '.repeat(space);\n  }\n  if (typeof space === 'string' && space !== '') {\n    return space;\n  }\n  return undefined;\n}\n//# sourceMappingURL=stringify.js.map"],"names":["g","f","exports","module","define","amd","globalThis","self","LosslessJSON","this","isInteger","value","INTEGER_REGEX","test","isNumber","NUMBER_REGEX","isSafeNumber","config","num","Number","parseFloat","str","String","v","extractSignificantDigits","s","approx","requiredDigits","length","startsWith","substring","UnsafeNumberReason","getUnsafeNumberReason","truncate_integer","isFinite","underflow","truncate_float","overflow","replace","EXPONENTIAL_PART_REGEX","DOT_REGEX","TRAILING_ZEROS_REGEX","LEADING_MINUS_AND_ZEROS_REGEX","LosslessNumber","isLosslessNumber","constructor","Error","valueOf","unsafeReason","undefined","BigInt","toString","parseLosslessNumber","reviveValue","context","key","reviver","Array","isArray","call","array","i","reviveArray","object","Object","keys","reviveObject","isHex","code","codeZero","codeNine","codeUppercaseA","codeUppercaseF","codeLowercaseA","codeLowercaseF","isDigit","isDeepEqual","a","b","every","item","index","isObject","Set","escapeCharacters","n","r","t","codeBackslash","codeOpeningBrace","codeClosingBrace","codeOpeningBracket","codeClosingBracket","codeSpace","codeNewline","codeTab","codeReturn","codeDoubleQuote","codePlus","codeMinus","codeOne","codeComma","codeDot","codeColon","codeUppercaseE","codeLowercaseE","isoDateRegex","_options","parse","text","parseNumber","arguments","parseValue","SyntaxError","gotAt","expectValue","expectEndOfInput","json","revive","parseObject","charCodeAt","skipWhitespace","initial","eatComma","start","parseString","throwObjectKeyExpected","eatColon","throwObjectValueExpected","prototype","hasOwnProperty","throwDuplicateKey","throwObjectKeyOrEndExpected","parseArray","expectArrayItem","push","throwArrayItemOrEndExpected","expectDigit","slice","parseNumeric","parseKeyword","name","result","char","escapeChar","fromCharCode","parseInt","throwInvalidUnicodeCharacter","throwInvalidEscapeCharacter","throwInvalidCharacter","expectEndOfString","numSoFar","pos","chars","parseNumberAndBigInt","reviveDate","Date","stringify","replacer","space","numberStringifiers","resolvedSpace","repeat","resolveSpace","stringifyValue","indent","stringifier","find","Boolean","JSON","childIndent","stringifyArray","toJSON","map","first","includeProperty","keyStr","stringifyObject","_key","toLosslessNumber","isNaN","toSafeNumberOrThrow","number","unsafeReasonText"],"mappings":"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"}