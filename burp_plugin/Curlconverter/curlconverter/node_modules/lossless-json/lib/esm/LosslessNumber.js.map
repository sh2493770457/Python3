{"version":3,"file":"LosslessNumber.js","names":["UnsafeNumberReason","extractSignificantDigits","getUnsafeNumberReason","isInteger","isNumber","LosslessNumber","isLosslessNumber","constructor","value","Error","valueOf","unsafeReason","undefined","truncate_float","Number","parseFloat","BigInt","toString","toLosslessNumber","String","length","isNaN","isFinite"],"sources":["../../src/LosslessNumber.ts"],"sourcesContent":["import {\n  UnsafeNumberReason,\n  extractSignificantDigits,\n  getUnsafeNumberReason,\n  isInteger,\n  isNumber\n} from './utils.js'\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport class LosslessNumber {\n  // numeric value as string\n  value: string\n\n  // type information\n  isLosslessNumber = true\n\n  constructor(value: string) {\n    if (!isNumber(value)) {\n      throw new Error(`Invalid number (value: \"${value}\")`)\n    }\n\n    this.value = value\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  valueOf(): number | bigint {\n    const unsafeReason = getUnsafeNumberReason(this.value)\n\n    // safe or truncate_float\n    if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n      return Number.parseFloat(this.value)\n    }\n\n    // truncate_integer\n    if (isInteger(this.value)) {\n      return BigInt(this.value)\n    }\n\n    // overflow or underflow\n    throw new Error(\n      `Cannot safely convert to number: the value '${this.value}' would ${unsafeReason} and become ${Number.parseFloat(this.value)}`\n    )\n  }\n\n  /**\n   * Get the value of the LosslessNumber as string.\n   */\n  toString(): string {\n    return this.value\n  }\n\n  // Note: we do NOT implement a .toJSON() method, and you should not implement\n  // or use that, it cannot safely turn the numeric value in the string into\n  // stringified JSON since it has to be parsed into a number first.\n}\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value: unknown): value is LosslessNumber {\n  // @ts-ignore\n  return (value && typeof value === 'object' && value.isLosslessNumber === true) || false\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value: number): LosslessNumber {\n  if (extractSignificantDigits(String(value)).length > 15) {\n    throw new Error(\n      `Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself (value: ${value})`\n    )\n  }\n\n  if (Number.isNaN(value)) {\n    throw new Error('Invalid number: NaN')\n  }\n\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number: ${value}`)\n  }\n\n  return new LosslessNumber(String(value))\n}\n"],"mappings":"AAAA,SACEA,kBAAkB,EAClBC,wBAAwB,EACxBC,qBAAqB,EACrBC,SAAS,EACTC,QAAQ,QACH,YAAY;;AAEnB;AACA;AACA;AACA,OAAO,MAAMC,cAAc,CAAC;EAC1B;;EAGA;EACAC,gBAAgB,GAAG,IAAI;EAEvBC,WAAWA,CAACC,KAAa,EAAE;IACzB,IAAI,CAACJ,QAAQ,CAACI,KAAK,CAAC,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,2BAA2BD,KAAK,IAAI,CAAC;IACvD;IAEA,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,OAAOA,CAAA,EAAoB;IACzB,MAAMC,YAAY,GAAGT,qBAAqB,CAAC,IAAI,CAACM,KAAK,CAAC;;IAEtD;IACA,IAAIG,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAKX,kBAAkB,CAACa,cAAc,EAAE;MACpF,OAAOC,MAAM,CAACC,UAAU,CAAC,IAAI,CAACP,KAAK,CAAC;IACtC;;IAEA;IACA,IAAIL,SAAS,CAAC,IAAI,CAACK,KAAK,CAAC,EAAE;MACzB,OAAOQ,MAAM,CAAC,IAAI,CAACR,KAAK,CAAC;IAC3B;;IAEA;IACA,MAAM,IAAIC,KAAK,CACb,+CAA+C,IAAI,CAACD,KAAK,WAAWG,YAAY,eAAeG,MAAM,CAACC,UAAU,CAAC,IAAI,CAACP,KAAK,CAAC,EAC9H,CAAC;EACH;;EAEA;AACF;AACA;EACES,QAAQA,CAAA,EAAW;IACjB,OAAO,IAAI,CAACT,KAAK;EACnB;;EAEA;EACA;EACA;AACF;;AAEA;AACA;AACA;AACA,OAAO,SAASF,gBAAgBA,CAACE,KAAc,EAA2B;EACxE;EACA,OAAQA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACF,gBAAgB,KAAK,IAAI,IAAK,KAAK;AACzF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASY,gBAAgBA,CAACV,KAAa,EAAkB;EAC9D,IAAIP,wBAAwB,CAACkB,MAAM,CAACX,KAAK,CAAC,CAAC,CAACY,MAAM,GAAG,EAAE,EAAE;IACvD,MAAM,IAAIX,KAAK,CACb,0GAA0GD,KAAK,GACjH,CAAC;EACH;EAEA,IAAIM,MAAM,CAACO,KAAK,CAACb,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEA,IAAI,CAACK,MAAM,CAACQ,QAAQ,CAACd,KAAK,CAAC,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,mBAAmBD,KAAK,EAAE,CAAC;EAC7C;EAEA,OAAO,IAAIH,cAAc,CAACc,MAAM,CAACX,KAAK,CAAC,CAAC;AAC1C","ignoreList":[]}