"""
递归目录扫描脚本 - Turbo Intruder

功能说明：
这是一个智能的递归目录扫描脚本，能够自动发现目录结构并深入扫描。
当发现有效目录时，脚本会自动在该目录下继续进行子目录扫描。

主要特性：
1. 递归扫描 - 自动深入发现的目录
2. 智能过滤 - 只对有效响应进行递归
3. 动态扩展 - 实时扩展扫描范围
4. 高效发现 - 快速构建目录树

使用场景：
- Web目录结构发现
- 隐藏文件和目录挖掘
- 网站架构分析
- 敏感路径发现
- 深度内容枚举

技术特点：
- 自动递归机制
- 动态请求生成
- 路径拼接处理
- 实时扫描扩展

工作原理：
1. 初始扫描：使用字典扫描根目录
2. 响应分析：识别有效的目录响应
3. 递归扫描：在发现的目录下继续扫描
4. 路径构建：自动拼接子目录路径
5. 持续发现：不断扩展扫描深度

扫描策略：
- 过滤404响应，只处理有效目录
- 使用原始请求模板进行递归
- 自动拼接路径进行深度扫描
- 利用相同字典进行子目录枚举

参数说明：
- endpoint: 目标端点
- 字典文件: /usr/share/dict/words
- 递归深度: 理论上无限制（取决于发现的目录）

注意事项：
- 可能产生大量请求
- 扫描深度取决于目录结构
- 需要注意目标服务器负载
- 建议设置合理的并发限制

性能考虑：
- 递归扫描会指数级增长请求数
- 建议使用较小的字典进行测试
- 可以添加深度限制机制
- 监控扫描进度和资源使用

使用方法：
1. 确保字典文件存在
2. 运行脚本开始初始扫描
3. 观察递归扫描的进展
4. 分析发现的目录结构

优化建议：
- 添加递归深度限制
- 使用专门的目录字典
- 实现智能去重机制
- 添加扫描状态监控

安全提醒：
- 仅用于授权的安全测试
- 注意目标服务器的负载
- 遵守测试范围和时间限制
- 避免对生产环境造成影响
"""

def queueRequests(target, wordlists):
    # 创建递归扫描引擎
    engine = RequestEngine(endpoint=target.endpoint)

    # 初始扫描：使用字典扫描根目录
    for word in open('/usr/share/dict/words'):
        engine.queue(target.req, word.rstrip())  # 去除换行符


def handleResponse(req, interesting):
    # 只处理非404响应（有效的目录或文件）
    if '404 Not Found' not in req.response:
        table.add(req)  # 添加到结果表

        # 递归扫描：在发现的路径下继续扫描子目录
        for word in open('/usr/share/dict/words'):
            # 构建递归路径：原路径 + '/' + 新单词
            recursive_path = req.words[0] + '/' + word.rstrip()
            # 使用原始请求模板进行递归扫描
            req.engine.queue(req.template, recursive_path)

    # 可以添加更多递归控制逻辑：
    # - 限制递归深度
    # - 过滤特定响应类型
    # - 添加路径去重机制
    # - 实现智能停止条件
