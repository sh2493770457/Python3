import Levenshtein
from termcolor import colored


class VulSuggest:
    def __init__(self, vuln_data):
        self.vuln_data = vuln_data
        self.search_index = self.build_search_index()

    def build_search_index(self):
        """构建包含名称和描述的搜索索引"""
        return [
            {
                'id': idx,
                'text': f"{item['漏洞名称']} {item['问题描述']}"
            } for idx, item in enumerate(self.vuln_data)
        ]

    def list_all_vulnerabilities(self):
        """显示所有漏洞类型"""
        print(colored("\n=== 当前收录的漏洞类型 ===", 'cyan', attrs=['bold']))
        for i, vuln in enumerate(self.vuln_data, 1):
            print(f"{colored(i, 'green')}. {colored(vuln['漏洞名称'], 'yellow')}")
        print(colored("\n输入关键词进行搜索，或输入 'q' 退出", 'blue'))

    def fuzzy_search(self, query, n=5, cutoff=0.4):
        """执行模糊匹配搜索"""
        matches = []
        query = query.lower().strip()

        for item in self.search_index:
            text = item['text'].lower()
            if query in text:
                matches.append(item['id'])
            else:
                ratio = self.string_similarity(query, text)
                if ratio >= cutoff:
                    matches.append(item['id'])

        matches = sorted(list(set(matches)), key=lambda x: self.get_match_score(query, x), reverse=True)
        return matches[:n]

    def get_match_score(self, query, idx):
        """计算匹配得分"""
        vuln = self.vuln_data[idx]
        name = vuln['漏洞名称'].lower()
        desc = vuln['问题描述'].lower()
        query = query.lower()

        score = 0
        if query in name:
            score += 100
        if query in desc:
            score += 50
        score += self.levenshtein_similarity(query, name) * 100
        score += self.levenshtein_similarity(query, desc) * 50
        return score

    @staticmethod
    def string_similarity(a, b):
        a, b = a.lower(), b.lower()
        set_a, set_b = set(a), set(b)
        intersection = set_a & set_b
        return len(intersection) / (len(set_a) + 1e-8)

    @staticmethod
    def levenshtein_similarity(a, b):
        return 1 - Levenshtein.distance(a, b) / max(len(a), len(b))

    def display_results(self, matches):
        """显示匹配结果"""
        print(colored("\n匹配到以下漏洞类型：", 'cyan', attrs=['bold']))
        for i, idx in enumerate(matches, 1):
            vuln = self.vuln_data[idx]
            print(f"{colored(i, 'green')}. {colored(vuln['漏洞名称'], 'yellow')}")
            print(f"   {colored('简要描述:', 'magenta')} {vuln['问题描述'][:60]}...")
            print()

        while True:
            try:
                choice = input(colored("\n请选择序号 (q退出/r重新搜索): ", 'blue')).strip()
                if choice.lower() == 'q':
                    return None
                if choice.lower() == 'r':
                    return 'retry'

                selected = int(choice) - 1
                if 0 <= selected < len(matches):
                    return self.vuln_data[matches[selected]]
                raise ValueError
            except:
                print(colored("输入无效，请重新选择", 'red'))

    def format_output(self, vuln):
        """生成报告模板"""
        return f"""## {colored('漏洞名称', 'cyan', attrs=['bold'])}
{colored(vuln['漏洞名称'], 'yellow')}

## {colored('问题描述', 'cyan', attrs=['bold'])}
{colored(vuln['问题描述'], 'green')}

## {colored('风险分析', 'cyan', attrs=['bold'])}
{colored(vuln['风险分析'], 'red')}

## {colored('修复建议', 'cyan', attrs=['bold'])}
{colored(vuln['修复建议'], 'magenta')}

"""

    def run(self):
        print(colored("=== 漏洞测试指南查询工具 ===", 'cyan', attrs=['bold']))
        while True:
            print(colored("\n输入关键词进行搜索，输入 'all' 查看所有漏洞类型，输入 'q' 退出", 'blue'))
            query = input(colored("\n请输入漏洞关键词: ", 'blue')).strip()
            if not query:
                print(colored("输入无效, 请重新输入!", 'red'))
                continue
            if query.lower() == 'q':
                break
            if query.lower() == 'all':
                self.list_all_vulnerabilities()
                continue

            matches = self.fuzzy_search(query)
            if not matches:
                print(colored("未找到匹配的漏洞类型", 'red'))
                continue

            while True:
                result = self.display_results(matches)
                if not result:
                    break
                if result == 'retry':
                    break

                print("\n" + "=" * 40)
                print(self.format_output(result))
                print("=" * 40)
                input(colored("\n按Enter继续搜索...", 'green'))
                break


if __name__ == "__main__":
    vuln_data = [
        {
            "漏洞名称": "任意账户锁定(高危)",
            "问题描述": "攻击者可以重复输入一个账号错误密码登录多次造成账号锁定",
            "风险分析": "攻击者可以通过尝试多次输入一个账号错误密码多次造成他人账号被恶意锁定",
            "修复建议": "1.账户锁定之后应隔一段时间才能继续使用认证功能\n2.认证功能处新增防自动化操作，如添加图形验证码"
        },
        {
            "漏洞名称": "DS_Store文件泄露(中危)",
            "问题描述": "攻击者可以访问改地址下载该文件,文件包含了文件夹内文件和目录的元信息。如果攻击者访问到这个文件，可能推测出目录下的文件名和文件夹结构，即使这些文件和目录被配置为不可直接访问。",
            "风险分析": "文件包含了文件夹内文件和目录的元信息。如果攻击者访问到这个文件，可能推测出目录下的文件名和文件夹结构，即使这些文件和目录被配置为不可直接访问。如果文件中记录了文件夹的绝对路径或特定的系统信息，攻击者可能获得服务器的文件路径布局，从而为进一步攻击（如路径遍历或文件包含漏洞）提供线索。",
            "修复建议": "对服务器的敏感目录和文件设置适当的访问权限，防止未授权访问。"
        },
        {
            "漏洞名称": "备份文件泄露(高危)",
            "问题描述": "攻击者可以访问该地址下载备份文件",
            "风险分析": "攻击者可在源码中破解核心代码或收集敏感信息",
            "修复建议": "删除备份文件,设置用户访问权限"
        },
        {
            "漏洞名称": "逻辑漏洞(低危)",
            "问题描述": "攻击者可以抓取数据修改页面显示数据",
            "风险分析": "如果漏洞被利用,例如门店地址被修改,可能会对商户以及用户使用造成影响",
            "修复建议": "对用户的请求合法性进行校验,对数据包传递的参数进行特殊编码处理."
        },
        {
            "漏洞名称": "腾讯地图api key信息泄露(中危)",
            "问题描述": "攻击者可以通过抓包burp抓包在请求的数据包中获取key",
            "风险分析": "攻击者可以通过抓包获取key,非法调用key",
            "修复建议": "参考腾讯地图官方接口文档进行加固\nhttps://lbs.qq.com/faq/serverFaq/webServiceKey"
        },
        {
            "漏洞名称": "源码未加密混淆(低危)",
            "问题描述": "小程序源码未做混淆处理，容易导致代码易被反编译，核心业务逻辑被破译，算法易被二次打包等，导致小程序存在被破解、核心代码被盗取的风险.",
            "风险分析": "攻击者可以通过反编译获取未混淆的源码,破解代码,核心代码被盗取",
            "修复建议": "参考腾讯官方文档进行加固\nhttps://developers.weixin.gg.com/miniprogram/dev/devtools/code obfuscation.html"
        },
        {
            "漏洞名称": "敏感信息泄露（高危）",
            "问题描述": "请求该地址可以获取敏感信息,并进一步利用",
            "风险分析": "攻击者可以访问url获取敏感信息",
            "修复建议": "禁止在代码中存储敏感数据:禁止在代码中存储如数据库连接字符串、口令和密钥之类的敏感数据，这样容易导致泄密。用于加密的密钥不可以硬编码在代码中。禁止密钥或帐号的口令以明文形式存储在数据库或者文件中:密钥或帐号的口令必须经过加密存储。例外情况，如果Web容器的配置文件中只能以明文方武配置连接数据库的用户名和口令，那么就不用强制遵循该规则，将该配置文件的属性改为只有属主可读写。禁止在cookie中以明文形式存储敏感数据:cookie信息容易被窃取，尽量不要在cookie中存储敏感数据;如果条件限制必须使用cookie存储敏感信息时,必须先对敏感信息加密再存储到cookie。禁止在隐藏域中存放明文形式的敏感数据。禁止用自己开发的加密算法，必须使用公开、安全的标准加密算法。禁止在日志中记录明文的敏感数据:例如口令、会话标识isessionid等，防止敏感信息泄漏,及时修改泄露的敏感信息口令."
        },
        {
            "漏洞名称": "任意文件上传（中危）",
            "问题描述": "攻击者上传任意类型的文件到服务器，并导致这些文件被服务器解析和执行，从而对系统安全构成威胁",
            "风险分析": "攻击者可以上传恶意文件到服务器，从而远程控制服务器。",
            "修复建议": "1、后端代码采用白名单对上传的文件后缀名进行白名单校验。\n2、对上传的文件类型、内容进行严格的验证，确保只允许安全文件上传。"
        },
        {
            "漏洞名称": "SourceMap源码信息泄露(中危)",
            "问题描述": "在当前js页面泄露js.map文件，可将源码下载下来反编译获取部分源码",
            "风险分析": "攻击者可以将部分源码下载到本地,使用第三方工具进行反编译获取部分源码,可能导致部分重要信息泄露。",
            "修复建议": "将js代码进行混淆加密处理,或者对其作出访问限制。"
        },
        {
            "漏洞名称": "Session会话不失效（中危）",
            "问题描述": "登陆后,正常情况关闭浏览器再次打开会话会失效要求重新登录,而本系统没有做session会话销毁的处理,访问url仍可以不用登录进入系统",
            "风险分析": "用户只需要登录一次就可以实现永久会话访问",
            "修复建议": "对网站会话做处理,在退出时销毁会话"
        },
        {
            "漏洞名称": "验证码有效期过长-任意账号密码修改(高危)",
            "问题描述": "在未登录的情况下,攻击者可以通过对已存在的用户发送验证码,构造请求并爆破验证码",
            "风险分析": "攻击者可以通过构造请求发送验证码并爆破,导致最终成功修改用户账号密码",
            "修复建议": "对验证码的时效性进行缩短(建议五分钟),且对验证码进行大小写字母数字混合强校验,或者在提交的时候添加滑块验证,降低验证码被爆破的风险."
        },
        {
            "漏洞名称": "未授权访问（高危）",
            "问题描述": "未授权访问漏洞，是在攻击者没有获取到登录权限或未授权的情况下，或者不需要输入密码，即可通过直接输入网站控制台主页面地址，或者不允许查看的链接便可进行访问，同时进行操作。",
            "风险分析": "攻击者猜测管理后台地址或利用已知的访问地址，尝试在未登录的情况下直接访问。",
            "修复建议": "常见的修复方法：在系统中，加入用户身份认证机制或者tonken验证，防止可被直接通过连接就可访问到用户的功能进行操作，简而言之，一定对系统重要功能点增加权限控制，对用户操作进行合法性验证，下列为针对常见的JSP语言编写的网站的安全修复方案：\n1、采用JAVA过滤器技术，对/pages下所有URL进行登录状态检查，通过session.getAttribute()方法从session中获取登录成功时存入session中的身份标识，判断客户端传递过来的身份标识是否与session中保存的一致，不一致则跳转到登录页面。关键代码如下：\n//从session里取的用户名信息\nString username = (String) session.getAttribute(\"userID\");\n//getAttribute中变量根据实际变量传入。\n//判断如果没有取到用户信息,就跳转到登陆页面\nif ((username == null) || \"\".equals(username)) {\n//跳转到登陆页面\nres.sendRedirect(\"http://\" + req.getHeader(\"Host\") +\"/login_oa.jsp\");} \nelse {\n//已经登陆,继续此次请求\nchain.doFilter(req, res); }}\n2、进行权限判断，以下代码为过滤器程序，通过会话获取用户身份信息，进行权限判断等操作：\n//在配置文件中设置过滤器\n<filter>\n<filter-name>SessionFilter</filter-name> \n<filter-class>com.nsfocus.frame.filter.SessionFilter</filter-class>\n</filter>\n<filter-mapping>\n<filter-name>SessionFilter</filter-name>\n<url-pattern>/pages/*</url-pattern>\n</filter-mapping>\n<filter>\n----------------------------------------------------------------------------------------------\n//后台过滤程序\npublic void doFilter(ServletRequest request, \nServletResponse response,FilterChain chain) throws \nIOException, ServletException {\nHttpServletRequest req = (HttpServletRequest) request;\nHttpServletResponse res = (HttpServletResponse) response;\nHttpSession session = req.getSession(true);\n//从session里取的用户名信息\nString username = (String) session.getAttribute(\"userID\");\n//getAttribute中变量根据实际变量传入。\n//判断如果没有取到用户信息,就跳转到登陆页面 \nif ((username == null) || \"\".equals(username)) {\n//跳转到登陆页面\nres.sendRedirect(\"http://\" + req.getHeader(\"Host\") +\"/login_oa.jsp\");} \nelse {\n//已经登陆,继续此次请求\nchain.doFilter(req, res);      }   }\npublic void destroy() {   }\n}"
        },
        {
            "漏洞名称": "垂直越权(高危)",
            "问题描述": "低权限账号可以通过修改cookie信息的方式越权访问高权限页面信息。",
            "风险分析": "攻击者可以通过低权限账号，随意对管理员账号数据信息进行增删改查，造成后台数据遭到破坏",
            "修复建议": "修复越权漏洞需严格执行最小权限原则，确保每个请求在服务器端验证用户权限，避免依赖客户端控制。使用安全的会话管理机制，保护敏感资源访问。加强身份验证，如多因素认证和强密码策略，结合日志审计与异常监控，及时发现问题。"
        },
        {
            "漏洞名称": "前端验证绕过(高危)",
            "问题描述": "通过抓包拦截修改响应内容可绕过校验",
            "风险分析": "通过抓包拦截修改响应内容可绕过校验",
            "修复建议": "对该功能模块添加强校验,不要在客户端进行校验，应该交由服务端进行校验"
        },
        {
            "漏洞名称": "短信轰炸(高危)",
            "问题描述": "可以构造请求对任意手机号发起短信轰炸",
            "风险分析": "可以对任意手机号进行短信轰炸",
            "修复建议": "对请求做校验,非系统用户不允许获取验证码,对验证码获取添加滑块验证以及次数限制防止被重复获取造成短信轰炸"
        },
        {
            "漏洞名称": "水平越权(高危)",
            "问题描述": "用户可修改请求参数,横向查看其它用户的信息。",
            "风险分析": "横向越权操作和纵向越权操作。前者指的是攻击者尝试访问与他拥有相同权限的用户的资源；而后者指的是一个低级别攻击者尝试访问高级别用户的资源",
            "修复建议": "对用户操作进行权限校验，防止通过修改参数进入未授权页面及进行非法操作，建议在服务端对请求的数据和当前用户身份做校验检查。流程描述：在服务器接收到用户发送的页面访问请求时，根据预设的识别策略，从用户的页面访问请求中提取该用户对应的用户唯一标识信息，同时提取所述页面访问请求对应的应答页面中的表单及该表单中不可修改参数，将所述表单及不可修改参数与所述用户唯一标识信息绑定后记录到参数列表中；检测到用户提交请求页面的表单时，将所述请求页面的表单及不可修改参数与该用户对应的所述参数列表中记录的表单及不可修改参数进行比对，控制该用户的访问"
        },
        {
            "漏洞名称": "PDF XSS攻击（中危）",
            "问题描述": "测试发现后台对文件上传未进行内容校验，可造成存储型XSS攻击。",
            "风险分析": "攻击者可以上传携带xss的pdf,影响用户正常使用业务系统",
            "修复建议": "过滤输入内容：开发人员应该对用户上传的PDF文件进行过滤，确保其中不包含恶意脚本等内容。禁用脚本：PDF文件中的JavaScript脚本是攻击者利用PDF XSS漏洞的主要手段之一，因此，禁用PDF文件中的JavaScript脚本可以有效地防止PDF XSS攻击。可以通过使用PDF阅读器的安全设置来禁用脚本。更新软件：PDF阅读器的安全漏洞可能会导致PDF XSS攻击，因此，使用最新版本的PDF阅读器可以有效地减少PDF XSS漏洞的风险。不允许用户直接打开pdf文件，而是必须下载到本地后才能打开pdf文件。"
        },
        {
            "漏洞名称": "超链接远程加载XSS攻击（中危）",
            "问题描述": "在功能点填入本地URL连接可加载XSS脚本",
            "风险分析": "攻击者可以本地起一个恶意的链接让用户点击访问窃取用户信息",
            "修复建议": "设置同源策略,限制用户加载自定义url,禁止跳转域外站点。"
        },
        {
            "漏洞名称": "sql注入(高危)",
            "问题描述": "通过对数据包插入恶意的payload语句可以获取数据库数据",
            "风险分析": "如果配置不当,在数据包中插入恶意的payload可以执行sql语句获取数据库敏感信息,以及拿权限的高危操作",
            "修复建议": "使用预处理的语句选择参数化查询,对用户输入的恶意sql语句进行过滤,SQL注入的主要原因是程序没有严格过滤用户输入的数据，导致非法数据侵入系统。\n1、对用户输入的特殊字符进行严格过滤，如’、;、+、-、&、、(、)、and、or、select、union.\n2、使用参数化査询(PreparedStatement)，避免将未经过滤的输入直接拼接到SQL查询\n语句中。\n3、 Web应用中用于连接数据库的用户与数据库的系统管理员用户的权限有严格的区分\n(如不能执行drop等)，并设置Web应用中用于连接数据库的用户不允许操作其他数据库。\n设置Web应用中用于连接数据库的用户对Web目录不允许有写权限"
        },
        {
            "漏洞名称": "SpringActuator信息泄露（高危）",
            "问题描述": "可造成未授权访问,获取接口敏感信息",
            "风险分析": "可造成未授权访问,获取接口敏感信息",
            "修复建议": "限制访问或不允许访问,禁用非必要断点,启用安全访问控制."
        },
        {
            "漏洞名称": "客户端校验绕过（高危）",
            "问题描述": "在正常的业务流程中服务器对用户提交的验证码进行校验，如果校验成功则返回响应的特征值，如1、true、success，如果失败则对应返回0、false、fail。此时可以通过修改返回特征值来进入下一流程。",
            "风险分析": "攻击者通过篡改响应包结果来绕过客户端校验，从而进入相应的业务流程。",
            "修复建议": "不要在客户端进行校验，应该交由服务端进行校验。"
        },
        {
            "漏洞名称": "存储型XSS (高危)",
            "问题描述": "网站将用户输入的内容输出到页面上，在这个过程中可能有恶意代码被浏览器执行。跨站脚本攻击,它指的是恶意攻击者往,Web 页面里插入恶意 js 代码，当用户浏览该页之时，嵌入其中 Web 里面的 js代码会被执行.",
            "风险分析": "存储型跨站脚本攻击最为常见的场景是将跨站脚本写入文本输入域中，如留言板、博客或新闻发布系统的评论框。当用户浏览留言和评论时，浏览器执行跨站脚本代码。",
            "修复建议": "防御存储型 XSS 需要结合输入过滤、输出编码、浏览器安全策略和数据库安全措施。服务器端应对用户输入进行过滤，防止恶意代码存入数据库，并在输出时使用 HTML 实体编码（如 htmlspecialchars 或 escape）防止代码执行。浏览器端可通过 CSP（内容安全策略）限制脚本执行，并使用 HttpOnly 和 Secure 保护 Cookie，防止 XSS 窃取会话信息。此外，数据库交互应使用 ORM 或预编译 SQL 语句，避免存储恶意代码，同时启用 X-Content-Type-Options: nosniff 等安全头，减少 XSS 攻击面。定期安全测试，如使用 Burp Suite 和 OWASP ZAP，可进一步提升防御能力。"
        },
        {
            "漏洞名称": "XML外部实体注入（XXE）",
            "问题描述": "攻击者通过构造恶意XML输入利用外部实体处理器，可读取服务器文件或发起SSRF攻击",
            "风险分析": "可能导致敏感文件泄露（如/etc/passwd）、服务器端请求伪造、拒绝服务攻击等",
            "修复建议": "1. 禁用XML外部实体处理（如PHP：libxml_disable_entity_loader）\n2. 使用JSON代替XML传输数据\n3. 对用户提交的XML文件进行严格过滤"
        },

        {
            "漏洞名称": "跨站请求伪造（CSRF）",
            "问题描述": "攻击者可诱导用户执行非预期的系统操作（如转账、修改密码）",
            "风险分析": "通过恶意链接或网站劫持用户会话执行敏感操作",
            "修复建议": "1. 添加CSRF Token验证机制\n2. 验证HTTP Referer头\n3. 关键操作使用二次验证（如短信验证码）"
        },

        {
            "漏洞名称": "服务器端请求伪造（SSRF）",
            "问题描述": "攻击者通过控制服务器发起的请求访问内网资源或本地服务",
            "风险分析": "可能导致内网探测、敏感服务未授权访问（如Redis、Consul）",
            "修复建议": "1. 限制请求协议（禁用file://, gopher://等）\n2. 使用白名单校验请求地址\n3. 禁用非必要URL解析功能"
        },

        {
            "漏洞名称": "不安全的反序列化",
            "问题描述": "攻击者构造恶意序列化数据实现远程代码执行",
            "风险分析": "可能导致系统完全沦陷，执行任意命令",
            "修复建议": "1. 避免直接反序列化用户输入\n2. 使用签名验证序列化数据完整性\n3. 使用安全替代方案（如JSON）"
        },

        {
            "漏洞名称": "目录遍历",
            "问题描述": "攻击者通过../等特殊字符访问非授权目录文件",
            "风险分析": "可能导致配置文件、日志文件等敏感信息泄露",
            "修复建议": "1. 规范化文件路径（如Java的getCanonicalPath）\n2. 白名单限制文件访问范围\n3. Web服务器配置目录访问权限"
        },

        {
            "漏洞名称": "命令注入",
            "问题描述": "攻击者通过系统命令拼接执行任意命令",
            "风险分析": "可能导致服务器完全控制权丢失",
            "修复建议": "1. 使用参数化接口（如ProcessBuilder）代替命令拼接\n2. 严格校验输入字符（禁用|;&$等）\n3. 使用最小权限账户运行服务"
        },

        {
            "漏洞名称": "不安全的直接对象引用（IDOR）",
            "问题描述": "通过修改参数（如用户ID、订单号）访问未授权资源",
            "风险分析": "可能导致用户数据泄露或越权操作",
            "修复建议": "1. 实施基于角色的访问控制（RBAC）\n2. 服务端校验资源所有权\n3. 使用不可猜测的UUID代替自增ID"
        },

        {
            "漏洞名称": "安全配置错误",
            "问题描述": "默认配置、冗余功能、错误权限设置导致的安全隐患",
            "风险分析": "可能暴露管理接口、调试信息或敏感文件",
            "修复建议": "1. 定期进行安全配置审计\n2. 禁用不必要的服务和功能\n3. 使用自动化扫描工具（如CIS基准）"
        },

        {
            "漏洞名称": "使用含已知漏洞的组件",
            "问题描述": "使用存在公开漏洞的第三方库或框架",
            "风险分析": "攻击者可通过漏洞利用链接管系统",
            "修复建议": "1. 建立软件成分分析（SCA）机制\n2. 定期更新依赖库\n3. 使用漏洞扫描工具（如OWASP Dependency-Check）"
        },

        {
            "漏洞名称": "HTTP响应头缺失",
            "问题描述": "缺少安全相关的HTTP响应头导致安全风险",
            "风险分析": "可能引发点击劫持、MIME嗅探等攻击",
            "修复建议": "配置安全头：\nContent-Security-Policy\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nStrict-Transport-Security"
        },

        {
            "漏洞名称": "开放重定向",
            "问题描述": "未验证的重定向参数导致钓鱼攻击",
            "风险分析": "用户可能被诱导访问恶意网站",
            "修复建议": "1. 白名单控制重定向目标\n2. 使用映射ID代替完整URL\n3. 用户交互确认重定向操作"
        },

        {
            "漏洞名称": "点击劫持",
            "问题描述": "通过iframe嵌套诱导用户点击隐藏界面元素",
            "风险分析": "可能导致非预期操作（如关注、转账）",
            "修复建议": "设置HTTP头：\nX-Frame-Options: DENY\nContent-Security-Policy: frame-ancestors 'none'"
        },

        {
            "漏洞名称": "弱密码策略",
            "问题描述": "允许简单密码或未实施密码复杂度要求",
            "风险分析": "易被暴力破解或字典攻击",
            "修复建议": "1. 强制8位以上混合字符\n2. 密码错误锁定机制\n3. 对接国家密码管理局规范（如GB/T 35273）"
        },

        {
            "漏洞名称": "CORS配置错误",
            "问题描述": "不当的跨域资源共享策略导致数据泄露",
            "风险分析": "可能被恶意网站窃取用户敏感数据",
            "修复建议": "1. 严格限制Access-Control-Allow-Origin\n2. 验证预检请求来源\n3. 禁用Credentials携带敏感信息"
        },

        {
            "漏洞名称": "文件包含漏洞",
            "问题描述": "通过动态文件包含功能读取任意文件",
            "风险分析": "可能导致源码泄露或远程代码执行",
            "修复建议": "1. 避免动态包含用户可控参数\n2. 白名单限制包含文件路径\n3. 设置open_basedir限制"
        },

        {
            "漏洞名称": "不安全的HTTP方法",
            "问题描述": "开启PUT/DELETE等危险方法且未做权限控制",
            "风险分析": "可能导致数据篡改或删除",
            "修复建议": "1. 禁用不必要的HTTP方法\n2. 配置Web服务器过滤规则\n3. 结合RBAC进行权限验证"
        },
        {
            "漏洞名称": "密码明文传输",
            "问题描述": "认证过程中密码以明文形式通过网络传输",
            "风险分析": "可能被中间人攻击窃取凭证",
            "修复建议": "1. 强制使用HTTPS协议\n2. 实施前端加密（如RSA加密）\n3. 定期更新SSL/TLS证书"
        },

        {
            "漏洞名称": "会话固定攻击",
            "问题描述": "攻击者预先设置会话ID并诱导用户使用",
            "风险分析": "可能导致会话劫持",
            "修复建议": "1. 登录后重新生成会话ID\n2. 禁用URL携带会话ID\n3. 设置SameSite=Strict属性"
        },

        {
            "漏洞名称": "错误信息泄露",
            "问题描述": "系统报错返回详细堆栈跟踪信息",
            "风险分析": "暴露服务器版本、数据库结构等敏感信息",
            "修复建议": "1. 配置自定义错误页面\n2. 生产环境禁用调试模式\n3. 日志记录与前端显示分离"
        },

        {
            "漏洞名称": "HTTP响应头拆分",
            "问题描述": "通过注入CRLF字符篡改响应头",
            "风险分析": "可能实施缓存投毒或设置恶意Cookie",
            "修复建议": "1. 过滤\\r\\n等控制字符\n2. 使用安全的头设置方法\n3. 启用SecurityFilter等防护组件"
        },

        {
            "漏洞名称": "支付逻辑漏洞",
            "问题描述": "通过修改金额参数完成异常支付",
            "风险分析": "可能造成0元购或超额支付",
            "修复建议": "1. 服务端校验支付金额\n2. 使用数字签名验证订单完整性\n3. 对接支付平台回调验证"
        },

        {
            "漏洞名称": "多因素认证绕过",
            "问题描述": "在MFA验证步骤跳过或重复使用验证码",
            "风险分析": "可能绕过二次验证直接登录",
            "修复建议": "1. 严格验证验证码状态机\n2. 单次有效+5分钟失效机制\n3. 关键操作强制重新认证"
        },

        {
            "漏洞名称": "Host头攻击",
            "问题描述": "伪造Host头访问内部接口",
            "风险分析": "可能导致缓存投毒或密码重置漏洞",
            "修复建议": "1. 校验Host头与预设域名匹配\n2. 禁用Host头传递到业务逻辑\n3. 使用SERVER_NAME变量替代"
        },

        {
            "漏洞名称": "暴力破解防护缺失",
            "问题描述": "未对登录接口实施频率限制",
            "风险分析": "可能通过字典攻击破解弱密码",
            "修复建议": "1. 账户锁定策略（5次失败锁定30分钟）\n2. 叠加图形验证码\n3. 监控异常登录行为"
        },

        {
            "漏洞名称": "Cookie安全属性缺失",
            "问题描述": "未设置HttpOnly/Secure/SameSite属性",
            "风险分析": "可能被XSS窃取或中间人劫持",
            "修复建议": "1. 设置HttpOnly防JS读取\n2. Secure属性强制HTTPS传输\n3. SameSite=Lax防御CSRF"
        },

        {
            "漏洞名称": "时间同步攻击",
            "问题描述": "利用OTP验证时间窗口进行爆破",
            "风险分析": "可能破解动态验证码",
            "修复建议": "1. 限制单次验证码使用次数\n2. 时间窗口缩小至1分钟\n3. 错误延迟响应机制"
        },

        {
            "漏洞名称": "中间人攻击（MITM）",
            "问题描述": "未正确实施HTTPS导致通信被窃听",
            "风险分析": "敏感数据泄露风险",
            "修复建议": "1. 启用HSTS头（max-age=31536000）\n2. 禁用弱加密套件\n3. 定期更新SSL/TLS配置"
        },

        {
            "漏洞名称": "密码重置功能缺陷",
            "问题描述": "通过修改参数实现任意账户密码重置",
            "风险分析": "可能导致账户被恶意接管",
            "修复建议": "1. 验证旧密码+手机验证码\n2. 重置链接加入不可逆签名\n3. 限制每日重置次数"
        },
        {
            "漏洞名称": "DNS重绑定攻击",
            "问题描述": "利用DNS TTL过期机制绕过同源策略",
            "风险分析": "可能访问内网服务或绕过IP白名单",
            "修复建议": "1. 验证Host头与源IP匹配\n2. 禁用私有IP地址访问\n3. 设置防火墙出站规则"
        },

        {
            "漏洞名称": "WebRTC信息泄露",
            "问题描述": "通过STUN请求获取用户内网IP",
            "风险分析": "可能暴露网络拓扑信息",
            "修复建议": "1. 使用mDNS隐藏真实IP\n2. 配置iceTransportPolicy: relay\n3. 提示用户授权访问"
        },

        {
            "漏洞名称": "Electron应用漏洞",
            "问题描述": "未启用nodeIntegration隔离或禁用上下文隔离",
            "风险分析": "可能导致RCE漏洞",
            "修复建议": "1. 启用sandbox和contextIsolation\n2. 禁用remote模块\n3. 使用最新Electron版本"
        },

        {
            "漏洞名称": "蓝牙低能耗（BLE）漏洞",
            "问题描述": "未加密的BLE通信或固定配对码",
            "风险分析": "可能导致中间人攻击或设备劫持",
            "修复建议": "1. 启用LE Secure Connections\n2. 使用动态配对码\n3. 实施通信加密"
        },
        {
            "漏洞名称": "服务器端模板注入（SSTI）",
            "问题描述": "攻击者通过用户输入注入恶意模板代码实现远程代码执行",
            "风险分析": "可能导致服务器完全控制权丢失，敏感数据泄露",
            "修复建议": "1. 避免用户控制模板内容\n2. 使用沙箱环境执行模板渲染\n3. 严格过滤<%= %>等危险符号"
        },

        {
            "漏洞名称": "HTTP参数污染",
            "问题描述": "通过提交重复参数干扰应用逻辑（如param=1&param=2）",
            "风险分析": "可能绕过验证机制或触发异常行为",
            "修复建议": "1. 只接受第一个/最后一个参数值\n2. 实施参数白名单校验\n3. 使用规范化的参数处理库"
        },

        {
            "漏洞名称": "第三方集成漏洞",
            "问题描述": "第三方组件（如支付SDK、统计插件）存在安全隐患",
            "风险分析": "可能导致数据泄露或供应链攻击",
            "修复建议": "1. 定期审计第三方组件\n2. 使用官方签名验证机制\n3. 限制第三方组件权限"
        },

        {
            "漏洞名称": "缓存投毒",
            "问题描述": "通过操纵缓存内容传播恶意响应",
            "风险分析": "可大规模影响用户访问正常内容",
            "修复建议": "1. 验证缓存键完整性\n2. 禁用X-Forwarded-Host等非必要头\n3. 配置Vary头正确区分用户"
        },

        {
            "漏洞名称": "子域劫持",
            "问题描述": "因过期DNS记录或云服务配置不当导致子域控制权丢失",
            "风险分析": "可能被用于钓鱼攻击或CNAME劫持",
            "修复建议": "1. 定期清理DNS记录\n2. 监控子域解析状态\n3. 配置CAA记录防止证书误颁"
        },

        {
            "漏洞名称": "Web缓存欺骗",
            "问题描述": "诱导用户访问特殊URL导致敏感信息被缓存",
            "风险分析": "可能泄露用户隐私数据",
            "修复建议": "1. 敏感内容禁用缓存\n2. 配置Cache-Control: private\n3. 使用Vary头区分用户会话"
        },

        {
            "漏洞名称": "JWT安全问题",
            "问题描述": "弱密钥、未验证签名或敏感信息存储",
            "风险分析": "可能导致身份伪造或会话劫持",
            "修复建议": "1. 使用HS256/RSA256强加密\n2. 设置合理的exp过期时间\n3. 避免在payload存储敏感信息"
        },

        {
            "漏洞名称": "不安全的文件下载",
            "问题描述": "通过参数控制下载任意服务器文件",
            "风险分析": "可能导致源码泄露或配置文件暴露",
            "修复建议": "1. 白名单限制下载文件类型\n2. 禁止用户控制完整文件路径\n3. 使用UUID映射真实文件名"
        },

        {
            "漏洞名称": "邮件头注入",
            "问题描述": "通过用户输入添加恶意邮件头（如CC/BCC）",
            "风险分析": "可能被用于垃圾邮件攻击",
            "修复建议": "1. 过滤\\r\\n等换行符\n2. 使用MIME编码处理邮件内容\n3. 采用JavaMail等安全库"
        },

        {
            "漏洞名称": "WebSocket安全漏洞",
            "问题描述": "未加密通信、未验证Origin头或CSRF防护缺失",
            "风险分析": "可能导致中间人攻击或非授权操作",
            "修复建议": "1. 强制使用wss协议\n2. 校验Origin头白名单\n3. 实施会话绑定机制"
        },

        {
            "漏洞名称": "LDAP注入",
            "问题描述": "通过构造特殊查询字符串获取敏感目录信息",
            "风险分析": "可能导致用户凭证泄露",
            "修复建议": "1. 使用参数化查询（如LDAPEncoder）\n2. 过滤()*|&!等特殊字符\n3. 配置最小查询权限"
        },

        {
            "漏洞名称": "OAuth配置错误",
            "问题描述": "redirect_uri未严格校验或scope权限过大",
            "风险分析": "可能导致账户劫持或过度授权",
            "修复建议": "1. 精确匹配redirect_uri\n2. 使用state参数防CSRF\n3. 遵循最小权限原则"
        },

        {
            "漏洞名称": "云存储配置错误",
            "问题描述": "AWS S3存储桶设置为公开访问",
            "风险分析": "可能导致敏感数据大规模泄露",
            "修复建议": "1. 启用Block Public Access\n2. 设置基于角色的访问控制\n3. 开启存储桶版本控制"
        },

        {
            "漏洞名称": "API速率限制缺失",
            "问题描述": "未对接口调用频率进行限制",
            "风险分析": "可能导致暴力破解或资源耗尽",
            "修复建议": "1. 实施令牌桶算法限流\n2. 返回429状态码+Retry-After头\n3. 高风险操作叠加验证码"
        },

        {
            "漏洞名称": "GraphQL注入",
            "问题描述": "通过复杂嵌套查询导致DoS或数据泄露",
            "风险分析": "可能暴露非授权字段或耗尽服务器资源",
            "修复建议": "1. 限制查询深度复杂度\n2. 实施白名单字段校验\n3. 启用查询成本分析"
        },

        {
            "漏洞名称": "Serverless函数漏洞",
            "问题描述": "无服务器函数存在过度权限或未处理冷启动",
            "风险分析": "可能导致横向移动或敏感环境变量泄露",
            "修复建议": "1. 遵循最小权限原则\n2. 加密存储环境变量\n3. 实施函数版本隔离"
        },

        {
            "漏洞名称": "默认凭证漏洞",
            "问题描述": "使用admin/admin等出厂默认账户",
            "风险分析": "可能被自动化工具批量入侵",
            "修复建议": "1. 首次登录强制修改密码\n2. 使用NMAP扫描网络设备\n3. 禁用默认账户"
        },

        {
            "漏洞名称": "sql注入-时间盲注攻击",
            "问题描述": "通过响应延迟推断数据库信息",
            "风险分析": "可能绕过传统WAF检测",
            "修复建议": "1. 统一错误响应时间\n2. 限制单个查询执行时间\n3. 使用预编译语句"
        },
        {
            "漏洞名称": "JWT未做签名验证（高危）",
            "问题描述": "攻击者可以篡改 JWT 令牌，绕过身份认证，获得未授权访问。",
            "风险分析": "如果 JWT 令牌未进行签名校验，攻击者可以伪造令牌，冒充其他用户进行非法操作。",
            "修复建议": "1. 确保后端严格校验 JWT 的签名。\n2. 使用强加密算法（如 HS256 或 RS256）进行签名。\n3. 配置令牌有效期，避免长期可用的令牌被滥用。"
        },
        {
            "漏洞名称": "远程代码执行（RCE）（高危）",
            "问题描述": "攻击者可通过代码注入执行任意系统命令。",
            "风险分析": "攻击者可能直接控制服务器，获取敏感数据或进行恶意攻击。",
            "修复建议": "1. 禁止直接执行用户输入的代码。\n2. 使用安全的参数化输入，避免命令注入。"
        },
        {
            "漏洞名称": "未加密的通信（高危）",
            "问题描述": "系统未使用 HTTPS 进行加密传输，可能被中间人攻击窃取数据。",
            "风险分析": "攻击者可监听通信内容，获取敏感信息，如用户名、密码。",
            "修复建议": "1. 启用 HTTPS，使用 TLS1.2 或以上版本。\n2. 配置 HSTS，强制浏览器使用 HTTPS。"
        },
        {
            "漏洞名称": "邮件验证绕过",
            "问题描述": "未验证邮箱所有权即可完成注册/修改操作",
            "风险分析": "可能冒用他人邮箱注册账户",
            "修复建议": "1. 强制邮箱验证流程\n2. 验证链接加入时效限制\n3. 校验MX记录有效性"
        },
        {
            "漏洞名称": "调试接口暴露",
            "问题描述": "生产环境开启Swagger/Actuator等调试接口",
            "风险分析": "可能泄露API文档或系统监控信息",
            "修复建议": "1. 生产环境禁用调试端点\n2. 配置IP白名单访问\n3. 启用基本身份验证"
        },
        {
            "漏洞名称": "API未鉴权",
            "问题描述": "未对RESTful API接口实施身份验证",
            "风险分析": "可能被批量爬取敏感数据",
            "修复建议": "1. 实施OAuth2鉴权\n2. 配置API网关访问控制\n3. 敏感接口强制访问日志"
        },
        {
            "漏洞名称": "竞争条件漏洞",
            "问题描述": "并发请求处理不当导致业务逻辑错误（如超额兑换优惠券）",
            "风险分析": "可能造成资源超额分配、重复支付等资金损失",
            "修复建议": "1. 使用数据库事务锁机制\n2. 实施分布式锁控制\n3. 关键操作添加防重放令牌"
        },
        {
            "漏洞名称": "订单金额篡改（负值攻击）",
            "问题描述": "修改订单金额参数为负数实现余额增加",
            "风险分析": "攻击者可能通过构造负金额订单非法充值账户余额",
            "修复建议": "1. 服务端校验金额范围（>0）\n2. 使用数字签名保护订单数据\n3. 实施金额变动审计"
        },
        {
            "漏洞名称": "无限领取优惠券",
            "问题描述": "未校验领取次数限制，通过重放请求批量获取优惠券",
            "风险分析": "导致营销资源被耗尽，造成资金损失",
            "修复建议": "1. 用户维度领取次数限制\n2. 请求添加防重放Token\n3. 活动期间总量控制"
        },
        {
            "漏洞名称": "并发库存超卖",
            "问题描述": "高并发场景下未加锁导致库存扣减异常",
            "风险分析": "实际库存不足时仍生成有效订单",
            "修复建议": "1. 使用数据库悲观锁（SELECT FOR UPDATE）\n2. 引入Redis分布式锁\n3. 异步库存校验机制"
        },
        {
            "漏洞名称": "密码重置步骤跳过",
            "问题描述": "直接访问重置完成页绕过验证步骤",
            "风险分析": "无需验证码即可重置任意账户密码",
            "修复建议": "1. 严格状态机控制（step1→step2→complete）\n2. 会话绑定验证凭证\n3. 完成页强制重新登录"
        },
        {
            "漏洞名称": "虚拟资产重复提现",
            "问题描述": "利用请求延迟重复提交提现申请",
            "风险分析": "单次操作实现多次资金出账",
            "修复建议": "1. 提现流水号唯一性校验\n2. 提现操作加锁（synchronized）\n3. 银行流水异步对账"
        },
        {
            "漏洞名称": "时间窗口滥用",
            "问题描述": "在有效期校验前后时间差内重复使用凭证",
            "风险分析": "如优惠券在过期瞬间仍可使用",
            "修复建议": "1. 服务端使用统一时间源\n2. 有效期截止前5分钟禁用\n3. 增加缓冲期状态标记"
        },
        {
            "漏洞名称": "批量枚举注册",
            "问题描述": "通过手机号+固定验证码批量注册虚假账户",
            "风险分析": "产生大量垃圾账户占用系统资源",
            "修复建议": "1. 手机验证码单次有效\n2. IP/设备指纹注册频率限制\n3. 人工审核异常注册模式"
        },
        {
            "漏洞名称": "特权功能参数残留",
            "问题描述": "管理员操作后未清除敏感参数，普通用户可复用",
            "风险分析": "如保留isAdmin=true参数导致越权",
            "修复建议": "1. 操作完成后清除会话属性\n2. 敏感参数禁止客户端传递\n3. 关键功能二次鉴权"
        },
        {
            "漏洞名称": "依赖客户端计算",
            "问题描述": "信任前端计算结果（如折扣计算、积分累计）",
            "风险分析": "通过修改JavaScript逻辑篡改计算结果",
            "修复建议": "1. 核心计算逻辑移至服务端\n2. 结果数据加密签名\n3. 前后端计算结果比对"
        },
        {
            "漏洞名称": "邀请码逻辑缺陷",
            "问题描述": "邀请码可重复使用或无限生成",
            "风险分析": "破坏邀请奖励机制，产生虚假用户",
            "修复建议": "1. 邀请码单次有效+绑定被邀请人\n2. 生成规则加入HMAC签名\n3. 邀请关系图谱分析"
        },
        {
            "漏洞名称": "审批流程绕过",
            "问题描述": "通过修改status参数直接跳转到完成状态",
            "风险分析": "未经审核流程发布违规内容",
            "修复建议": "1. 状态变更走工作流引擎\n2. 禁止前端传递状态参数\n3. 操作日志留痕审计"
        },
        {
            "漏洞名称": "免费资源滥用",
            "问题描述": "通过切换设备/IP无限获取试用资源",
            "风险分析": "如云服务免费额度被恶意耗尽",
            "修复建议": "1. 实名认证绑定试用资格\n2. 设备指纹+行为分析\n3. 资源用量实时监控"
        },
        {
            "漏洞名称": "组合漏洞叠加利用",
            "问题描述": "如越权+CSRF组合攻击实现远程恶意操作",
            "风险分析": "单一漏洞危害性指数级放大",
            "修复建议": "1. 防御措施叠加（权限+Token双校验）\n2. 攻击面收敛（最小化暴露接口）\n3. 威胁建模分析"
        }
    ]

    tool = VulSuggest(vuln_data)
    tool.run()
